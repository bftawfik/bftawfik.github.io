{"version":3,"sources":["/home/bishoy/b-code/github/personal/github.io/bftawfik2/node_modules/vertical-rhythm-reset/dist/_vertical-rhythm-reset.scss","/home/bishoy/b-code/github/personal/github.io/bftawfik2/src/styles/vr.scss","/home/bishoy/b-code/github/personal/github.io/bftawfik2/src/styles/Index.sass","/home/bishoy/b-code/github/personal/github.io/bftawfik2/src/styles/_colors.sass","/home/bishoy/b-code/github/personal/github.io/bftawfik2/src/styles/BftHeader.sass","/home/bishoy/b-code/github/personal/github.io/bftawfik2/src/styles/BftNav.sass","/home/bishoy/b-code/github/personal/github.io/bftawfik2/src/styles/BftBio.sass","/home/bishoy/b-code/github/personal/github.io/bftawfik2/src/styles/BftQuote.sass","/home/bishoy/b-code/github/personal/github.io/bftawfik2/src/styles/BftFooter.sass","/home/bishoy/b-code/github/personal/github.io/bftawfik2/src/styles/BftAllProjects.sass","/home/bishoy/b-code/github/personal/github.io/bftawfik2/src/styles/BftProject.sass","/home/bishoy/b-code/github/personal/github.io/bftawfik2/src/styles/BftInfoAndContact.sass","/home/bishoy/b-code/github/personal/github.io/bftawfik2/src/styles/BftInfo.sass","/home/bishoy/b-code/github/personal/github.io/bftawfik2/src/styles/BftContacts.sass","/home/bishoy/b-code/github/personal/github.io/bftawfik2/src/styles/BftSingleContact.sass","/home/bishoy/b-code/github/personal/github.io/bftawfik2/src/styles/App.sass"],"names":[],"mappings":"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","file":"main.f034be1a.chunk.css","sourcesContent":["// Vertical Rhythm Reset\n// http://jhildenbiddle.github.io/vertical-rhythm-reset/\n// =============================================================================\n// SassDoc file-level annotations\n////\n/// @group vertical-rhythm-reset\n/// @author John Hildenbiddle\n////\n\n// Global Options\n// =============================================================================\n/// Default box sizing method.\n///\n/// A CSS rule will be generated that sets the box-sizing method of all elements\n/// to this value when the `vr-reset` mixin is called. The box-sizing method is\n/// also used in the `vr` mixin to calculate border offset values.\n///\n/// @type String [border-box|content-box]\n$vr-box-sizing: border-box !default;\n\n/// A map used to generate media queries and recalculate values for\n/// responsive layouts when the `vr-reset` mixin is called.\n///\n/// **Customization**\n/// - Make a copy of the default map above as your starting point.\n/// - Remove the `!default` variable declaration if copying-and-pasting map.\n/// - Modify the map keys and values as needed (see **Map Structure** below)\n/// - Only settings that change between breakpoints need to be specified.\n/// - Breakpoint settings not specified will inherit the value from the\n///   previous breakpoint.\n/// - Set the value to `false` to disable responsive typography and vertical\n///   rhythm grids.\n///\n/// @type Map\n///\n/// @prop {Length} [width] - Breakpoint min-width\n///   Media queries will be generated for each breakpoint width provided.\n///\n/// @prop {Number|Length(px|rem|%)} [width].font-size - Root element font-size\n///   A `:root` CSS rule will be generated for each breakpoint that sets the\n///   root element font size to the specified value.\n///\n/// @prop {Number|Length(px|rem|%)} [width].line-height - Line-height\n///   This value is used to calculate the vertical rhythm row height for each\n///   breakpoint by multiplying the font-size by the line height and converting\n///   the result to a `rem`-based value. A `*` selector CSS rule is then\n///   generated for each breakpoint that sets the default line height for all\n///   elements to this value (the equivalent of one vertical rhythm row).\n///\n/// @prop {Number|String} [width].modular-scale - Modular type scale\n///   This value determines the modular type scale used to calculate unitless\n///   font-size values passed to the `vr()` mixin and the CSS values generated\n///   by the `$vr-helper` map. See the `$vr-modular-scale-map` variable for a\n///   complete list of modular scale names.\n///\n/// @prop {Color} [width].grid-color - Vertical rhythm grid color\n///   This value is used as the base color for the vertical rhythm grid lines,\n///   element heightlights and detail panel presentation.\n///\n/// @see $vr-font-size\n/// @see $vr-line-height\n/// @see $vr-grid-color\n/// @see $vr-modular-scale\n/// @see $vr-modular-scale-map\n$vr-breakpoints: (\n    60em: ( // 960px\n        font-size: 16px\n    ),\n    90em: ( // 1440px\n        font-size: 18px\n    )\n) !default;\n\n/// A map used to generate vertical rhythm helper CSS rules and classes.\n///\n/// Helper rules and classes provide a convenient way to set typography and\n/// vertical rhythm properties using CSS class names and HTML properties. This\n/// makes it easy to quickly change the font size, specify the height, or add\n/// margins and padding to HTML elements without creating new CSS/SCSS rules.\n///\n/// **Customization**\n/// - Make a copy of the default map above as your starting point.\n/// - Remove the `!default` variable declaration if copying-and-pasting map.\n/// - Modify the map keys and values as needed (see **Map Structure** below)\n/// - Set the value of `$vr-helpers` to `false` to prevent helper classes and\n///   rules from being auto-generated.\n///\n/// **Known Issues**\n/// - Offset classes apply a negative bottom margin to the element. When an\n///   offset class is applied to an element that already has a bottom margin\n///   defined, the negative bottom margin can override the existing margin\n///   setting. There are two solutions to this issues:\n///   1. Wrap the offset element in another HTML tag and apply the margin to\n///      the parent element instead.\n///   2. Use the `vr` mixin to apply both the offset and the margins to the\n///      element instead of CSS class names. The `vr` mixin accounts for offset\n///      elements with margins while classes do not.\n///\n/// @type Map\n///\n/// @prop {String} [property] - The vertical rhythm property to generate rules\n///   and classes for\n///\n/// @prop {Number} [property].count - The number of variations to generate\n/// @prop {String} [property].prefix - The portion of the class name that will\n/// preceed the numeric value\n/// @prop {String} [property].suffix - The portion of the class name that will\n/// proceed the numeric value\n///\n/// @example css CSS\n///   /*\n///     Example output from $vr-helpers map with default settings.\n///     Showing first iteration only. Pattern will continue for\n///     each helper type based on the $count specified.\n///   */\n///\n///   /* Font Size */\n///   .vr-font-size-1 {\n///     font-size: 1.2rem;\n///     line-height: 1.5rem;\n///   }\n///\n///   /* Line Height */\n///   .vr-line-height-1 {\n///     line-height: 1.5rem;\n///   }\n///\n///   /* Height */\n///   [height=\"1\"],\n///   select[multiple][size=\"1\"],\n///   textarea[rows=\"1\"],\n///   .vr-height-1 {\n///     height: 1.5rem;\n///   }\n///\n///   /* Width */\n///   .vr-width-1 {\n///     width: 1.5rem;\n///   }\n///\n///   /* Margin */\n///   .vr-margin-1 {\n///     margin-top: 1.5rem;\n///     margin-bottom: 1.5rem;\n///   }\n///   .vr-margin-top-1 {\n///     margin-top: 1.5rem;\n///   }\n///   .vr-margin-bottom-1 {\n///     margin-bottom: 1.5rem;\n///   }\n///\n///   /* Padding */\n///   .vr-padding-1 {\n///     padding-top: 1.5rem;\n///     padding-bottom: 1.5rem;\n///   }\n///   .vr-padding-top-1 {\n///     padding-top: 1.5rem;\n///   }\n///   .vr-padding-bottom-1 {\n///     padding-bottom: 1.5rem;\n///   }\n///\n///   /* Border Offsets */\n///   .vr-offset-1 {\n///     -webkit-transform: translateY(-1px);\n///         -ms-transform: translateY(-1px);\n///             transform: translateY(-1px);\n///     margin-bottom: -2px;\n///   }\n///   .vr-offset-top-1 {\n///     -webkit-transform: translateY(-1px);\n///         -ms-transform: translateY(-1px);\n///             transform: translateY(-1px);\n///     margin-bottom: -1px;\n///   }\n///   .vr-offset-bottom-1 {\n///     margin-bottom: -1px;\n///   }\n///\n/// @example markup HTML\n///   <div class=\"vr-font-size-1\">...</div>\n///   <div class=\"vr-line-height-1\">...</div>\n///   <div class=\"vr-height-1\">...</div>\n///   <div class=\"vr-width-1\">...</div>\n///   <div class=\"vr-margin-1\">...</div>\n///   <div class=\"vr-margin-top-1\">...</div>\n///   <div class=\"vr-margin-bottom-1\">...</div>\n///   <div class=\"vr-padding-1\">...</div>\n///   <div class=\"vr-padding-top-1\">...</div>\n///   <div class=\"vr-padding-bottom-1\">...</div>\n///   <div class=\"vr-offset-1\">...</div>\n///   <div class=\"vr-offset-top-1\">...</div>\n///   <div class=\"vr-offset-bottom-1\">...</div>\n///\n/// @see vr\n$vr-helpers: (\n    font-size: (\n        count : 5,\n        prefix: \"vr-font-size-\"\n    ),\n    line-height: (\n        count : 10,\n        prefix: \"vr-line-height-\"\n    ),\n    height: (\n        count : 10,\n        prefix: \"vr-height-\"\n    ),\n    width: (\n        count : 10,\n        prefix: \"vr-width-\"\n    ),\n    margin: (\n        count : 5,\n        prefix: \"vr-margin-\"\n    ),\n    margin-top: (\n        count : 5,\n        prefix: \"vr-margin-top-\"\n    ),\n    margin-bottom: (\n        count : 5,\n        prefix: \"vr-margin-bottom-\"\n    ),\n    padding: (\n        count : 5,\n        prefix: \"vr-padding-\"\n    ),\n    padding-top: (\n        count : 5,\n        prefix: \"vr-padding-top-\"\n    ),\n    padding-bottom: (\n        count : 5,\n        prefix: \"vr-padding-bottom-\"\n    ),\n    offset: (\n        count : 5,\n        prefix: \"vr-offset-\"\n    ),\n    offset-top: (\n        count : 5,\n        prefix: \"vr-offset-top-\"\n    ),\n    offset-bottom: (\n        count : 5,\n        prefix: \"vr-offset-bottom-\"\n    )\n) !default;\n\n/// Default root element font size.\n///\n/// A `:root` CSS rule will be generated that sets the root element font size to\n/// the specified value when the `vr-reset` mixin is called.\n///\n/// @type Number|Length(px|rem|%)\n$vr-font-size: 14px !default;\n\n/// Default vertical rhythm grid color.\n///\n/// This value is used as the base color for the vertical rhythm grid lines,\n/// element heightlights and detail panel presentation.\n///\n/// @type Color\n$vr-grid-color: rgb(233, 30, 99) !default;\n\n/// Default line height.\n///\n/// This value is used to calculate the vertical rhythm row height by\n/// multiplying the font-size by the line height and converting the result to a\n/// `rem`-based value. A `*` selector CSS rule is then generated when the\n/// `vr-reset` mixin is called that sets the default line height for all\n/// elements to this value (the equivalent of one vertical rhythm row).\n///\n/// @type Number|Length(px|rem|%)\n$vr-line-height: 1.5 !default;\n\n/// Default modular type scale.\n///\n/// This value determines the modular type scale used to calculate unitless\n/// font-size values passed to the `vr()` mixin and the CSS values generated\n/// by the `$vr-helper` map. See the `$vr-modular-scale-map` variable for a\n/// complete list of modular scale names.\n///\n/// Set the value of `$vr-modular-scale` to `false` to disable modular scale\n/// typography.\n///\n/// @type Number|String\n///\n/// @see $vr-modular-scale-map\n$vr-modular-scale: minor-third !default;\n\n/// A map containing modular type scale names and values graciously borrowed\n/// from http://www.modularscale.com\n///\n/// @type Map\n$vr-modular-scale-map: (\n    minor-second    : 1.067, // Ratio = 15:16\n    major-second    : 1.125, // Ratio = 8:9\n    minor-third     : 1.2,   // Ratio = 5:6\n    major-third     : 1.25,  // Ratio = 4:5\n    perfect-fourth  : 1.333, // Ratio = 3:4\n    augmented-fourth: 1.414, // Ratio = 1:√2\n    perfect-fifth   : 1.5,   // Ratio = 2:3\n    minor-sixth     : 1.6,   // Ratio = 5:8\n    golden          : 1.618, // Ratio = 1:1.618\n    major-sixth     : 1.667, // Ratio = 3:5\n    minor-seventh   : 1.778, // Ratio = 9:16\n    major-seventh   : 1.875, // Ratio = 8:15\n    octave          : 2      // Ratio = 1:2\n) !default;\n\n\n// Variables - Private\n// =============================================================================\n// A boolean used to detect if the base reset rules were applied at the root.\n// Checking this value prevents the base rules from being rendered again if\n// the reset mixin is called multiple times.\n$_vr-is-root-reset: false;\n\n// A list of selectors that the vr mixin has generated media queries for. Only\n// selectors that are not found in the list will have media queries generated\n// automatically based on the values defined in the $vr-breakpoints map. This\n// allows specifying custom values by manually nesting media queries for\n// breakpoints that are not defined in the $vr-breakpoints map.\n//\n// Example:\n// h1 {\n//   /* Will generate media queries from $vr-breakpoints map */\n//   @include vr(font-size: 1);\n//\n//   @media (min-width: [custom value]) {\n//     /* Will NOT generate media queries from $vr-breakpoints map */\n//     @include vr(font-size: 2);\n//   }\n// }\n$_vr-rendered: ();\n\n// The default border color\n$_vr-border-color: #808080;\n\n// Functions - Private\n// =============================================================================\n// Gets a maps containing root and breakpoint settings, all settings for a\n// specific breakpoint, or a specific breakpoint setting.\n@function _get-settings($breakpoint: null, $setting: null) {\n    // Store global options as map\n    $settings-map: (\n        root: (\n            font-size    : _to-root-px($vr-font-size),\n            line-height  : _to-rem($vr-line-height, $vr-font-size),\n            modular-scale: $vr-modular-scale,\n            grid-color   : $vr-grid-color\n        )\n    );\n\n    // Merge settings map with breakpoints map\n    $settings-map: if(type-of($vr-breakpoints) == 'map', map-merge($settings-map, $vr-breakpoints), $settings-map);\n\n    // Find settings by key index\n    @if type-of($breakpoint) == 'number' {\n        $settings-list: map-keys($settings-map);\n        $breakpoint   : nth($settings-list, $breakpoint);\n    }\n\n    // Return breakpoint settings\n    @if $breakpoint and $setting {\n        @return map-get(map-get($settings-map, $breakpoint), $setting);\n    }\n    // Return breapoint map\n    @else if $breakpoint {\n        @return map-get($settings-map, $breakpoint);\n    }\n    // Return settings map\n    @else {\n        @return $settings-map;\n    }\n}\n\n// Gets the root settings map or specific root setting\n@function _get-root($setting: null) {\n    @return _get-settings(root, $setting);\n}\n\n// Calculates modular scale font size\n@function _modular-scale($multiple, $modular-scale: _get-root(modular-scale)) {\n    $exponent     : 1;\n    $result       : 1rem;\n    $modular-scale: if(not $modular-scale, 1, $modular-scale);\n\n    // Modular scale by name\n    @if $modular-scale and type-of($modular-scale) == 'string' {\n        // Get named ratio value\n        @if map-has-key($vr-modular-scale-map, $modular-scale) {\n            $modular-scale: map-get($vr-modular-scale-map, $modular-scale);\n        }\n        @else {\n            @error 'Vertical Rhythm Reset: A modular scale named \"#{$modular-scale}\" is not defined.';\n        }\n    }\n\n    // Calcute size based on multiple and ratio\n    @if $multiple > 0 {\n        @for $i from 1 through $multiple {\n            $exponent: $exponent * $modular-scale;\n        }\n    }\n    @else if $multiple < 0 {\n        $multiple: $multiple * -1;\n\n        @for $i from 1 through $multiple {\n            $exponent: $exponent / $modular-scale;\n        }\n    }\n\n    @return $result * $exponent;\n}\n\n// Removes unit from value\n@function _strip-unit($value) {\n    @return $value / ($value * 0 + 1);\n}\n\n// Converts unitless, pixel, percentage and rem values to the rem equivalent of\n// the nearest whole pixel value\n@function _to-rem($value, $base: _get-root(font-size)) {\n    $valid-units: \"%\", px, rem;\n\n    // Valid units\n    @if unitless($value) or index($valid-units, unit($value)) > 0 {\n        $base: _strip-unit($base);\n\n        // Pixel\n        @if unit($value) == 'px' {\n            // Convert to unitless pixel value\n            $value: _strip-unit($value);\n        }\n        // Percentage\n        @else if unit($value) == \"%\" {\n            // Convert percentage to decimal\n            $value: _strip-unit($value) / 100;\n\n            // Convert to unitless pixel value\n            $value: ($value * $base);\n        }\n        // Unitless / Rem\n        @else if unitless($value) or unit($value) == 'rem' {\n            // Convert to unitless pixel value\n            $value: _strip-unit($value) * $base;\n        }\n\n        // Round to nearest whole number\n        $value: round($value);\n\n        // Convert to rem\n        $value: ($value / $base) * 1rem;\n\n        @if $value != 0rem {\n            // Adjust for rounding errors. This addresses issues caused by\n            // browsers rounding the same value differently based on the\n            // application. For example, a rem-based floating point value will\n            // be rounded up when used as a height value but rounded down if\n            // used as a gradient dimension.\n            $value: $value + 0.00001;\n        }\n\n    }\n    // Invalid Units\n    @else {\n        @error \"Value '#{$value}' must be unitless, px, percentage or rem.\";\n    }\n\n    @return $value;\n}\n\n// Converts unitless, pixel, percentage and rem values to the nearest whole\n// pixel value based on a root font size of 16\n@function _to-root-px($value) {\n    $unit       : unit($value);\n    $valid-units: \"%\", px, rem;\n\n    // Valid Units\n    @if unitless($value) or index($valid-units, $unit) > 0 {\n        $value: _strip-unit($value);\n\n        // Percentage\n        @if $unit == \"%\" {\n            $value: ($value / 100) * 16;\n        }\n        // Unitless / Rem\n        @else if $unit == 'rem' {\n            $value: $value * 16;\n        }\n\n        $value: round($value) * 1px;\n    }\n    // Invalid Units\n    @else {\n        @error \"Value '#{$value}' must be unitless, px, percentage or rem.\";\n    }\n\n    @return $value;\n}\n\n// Mixins - Private\n// =============================================================================\n// Conditionally wraps content block in media query with optional comment\n@mixin _maybe-query($media-query: false, $comment: false) {\n    @if $media-query {\n        @media #{$media-query} {\n            @if $comment {\n                /* #{$comment} */\n            }\n            @content;\n        }\n    }\n    @else {\n        @if $comment {\n            /* #{$comment} */\n        }\n        @content;\n    }\n}\n\n// Mixins - Public\n// =============================================================================\n/// Generates CSS rules for vertical rhythm grid alignment and modular scale\n/// typography using base values and breakpoint settings specified in the\n/// `$vr-breakpoints` map.\n///\n/// @param {Length(px|%)|Number} $font-size [null]\n///   Accepts both unitless and unit values:\n///   - Unitless values will be converted to `rem`-based modular type scale\n///     equivalent.\n///     - `font-size:0` = 1rem\n///     - `font-size:1` = 1rem * modular scale\n///     - `font-size:2` = 1rem * modular scale<sup>2</sup>\n///     - `font-size:3` = 1rem * modular scale<sup>3</sup>\n///     - ...\n///   - Unit values (`px`, `rem` or `%`) will be converted to `rem`-based\n///     values.\n///     - `font-size:16px  ` = 1.14285rem *(Example when root font-size = 14px)*\n///     - `font-size:0.8rem` = 0.8rem\n///     - `font-size:80%   ` = 0.8rem\n///   - The font-size will be used to determine the line-height required for\n///     vertical rhythm grid alignment.\n///\n/// @param {Number} $line-height [null]\n///   Sets the line-height to a multiple of vertical rhythm grid rows.\n///\n/// @param {Length(px)|Number} $height [null]\n///   Accepts both unitless and `px`-based unit values:\n///   - Unitless values will be converted to `rem`-based height equivalent of\n///     vertical rhythm grid rows.\n///     - `height:1` = vertical rhythm grid rows * 1\n///     - `height:2` = vertical rhythm grid rows * 2\n///     - `height:3` = vertical rhythm grid rows * 3\n///     - ...\n///   - Pixel-based values will be applied unchanged with margin values\n///     generated to ensure fixed-height element aligns with vertical rhythm\n///     grid.\n///     - `height:100px` = 100px height with top/bottom margins\n///     - `height:150px` = 150px height with top/bottom margins\n///     - `height:200px` = 200px height with top/bottom margins\n///\n/// @param {Number} $width [null]\n///   Sets the width to a multiple of vertical rhythm grid row height.\n///\n/// @param {List|Number} $margin [null]\n///   Shorthand margin setting. Explicit top|bottom|right|left settings will\n///   override shorthand values.\n///   - `margin:1      ` = top|bottom|right|left: 1\n///   - `margin:1 2    ` = top|bottom: 1, right|left: 2\n///   - `margin:1 2 3  ` = top: 1, right|left: 2, bottom: 3\n///   - `margin:1 2 3 4` = top: 1, right: 2, bottom: 3, left: 4\n///\n/// @param {Length|Number|null} $margin-top [null]\n///   Accepts both unitless and unit values:\n///   - Unitless values are converted to the equivalent number of vertical\n///     rhythm grid rows\n///   - Unit-based values are applied unchanged\n///\n/// @param {Length|Number|null} $margin-bottom [null]\n///   Accepts both unitless and unit values:\n///   - Unitless values are converted to the equivalent number of vertical\n///     rhythm grid rows\n///   - Unit-based values are applied unchanged\n///\n/// @param {Length|Number|null} $margin-right [null]\n///   Accepts both unitless and unit values:\n///   - Unitless values are converted to the equivalent number of vertical\n///     rhythm grid rows\n///   - Unit-based values are applied unchanged\n///\n/// @param {Length|Number|null} $margin-left [null]\n///   Accepts both unitless and unit values:\n///   - Unitless values are converted to the equivalent number of vertical\n///     rhythm grid rows\n///   - Unit-based values are applied unchanged\n///\n/// @param {List|Number} $padding [null]\n///   Shorthand padding setting. Explicit top|bottom|right|left settings will\n///   override shorthand values.\n///   - `padding:1      ` = top|bottom|right|left: 1\n///   - `padding:1 2    ` = top|bottom: 1, right|left: 2\n///   - `padding:1 2 3  ` = top: 1, right|left: 2, bottom: 3\n///   - `padding:1 2 3 4` = top: 1, right: 2, bottom: 3, left: 4\n///\n/// @param {Length|Number|null} $padding-top [null]\n///   Accepts both unitless and unit values:\n///   - Unitless values are converted to the equivalent number of vertical\n///     rhythm grid rows\n///   - Unit-based values are applied unchanged\n///\n/// @param {Length|Number|null} $padding-bottom [null]\n///   Accepts both unitless and unit values:\n///   - Unitless values are converted to the equivalent number of vertical\n///     rhythm grid rows\n///   - Unit-based values are applied unchanged\n///\n/// @param {Length|Number|null} $padding-right [null]\n///   Accepts both unitless and unit values:\n///   - Unitless values are converted to the equivalent number of vertical\n///     rhythm grid rows\n///   - Unit-based values are applied unchanged\n///\n/// @param {Length|Number|null} $padding-left [null]\n///   Accepts both unitless and unit values:\n///   - Unitless values are converted to the equivalent number of vertical\n///     rhythm grid rows\n///   - Unit-based values are applied unchanged\n///\n/// @param {List|Number} $offset [null]\n///   Shorthand offset setting. Explicit top|bottom settings will override\n///   shorthand values.\n///   - `offset:1  ` = offset-top:1, offset-bottom:1\n///   - `offset:2 3` = offset-top:2, offset-bottom:3\n///\n/// @param {Length(px)|Number} $offset-top [null]\n///   Accepts both unitless and `px`-based unit values.\n///\n///   Sets the top offset of an element in pixels using a CSS transform rule.\n///   Depending on which properties were set in the same `vr` mixin call, this\n///   value may also be used to adjust the element height and bottom margin\n///   for vertical rhythm grid alignment.\n/// @param {Length(px)|Number} $offset-bottom [null]\n///   Accepts both unitless and `px`-based unit values.\n///\n///   Sets the bottom offset of an element in pixels using a negative bottom\n///   margin. Depending on which properties were set in the same `vr` mixin\n///   call, this value may also be used to adjust the element height for\n///   vertical rhythm grid alignment.\n///\n/// @example scss SCSS\n///   // Example of setting vertical rhythm properties\n///   div {\n///     @include vr(\n///       $font-size     : 1,\n///       $height        : 2,\n///       $margin-top    : 1,\n///       $margin-bottom : 1,\n///       $padding-top   : 1,\n///       $padding-bottom: 1,\n///       $offset-top    : 3px,\n///       $offset-bottom : 3px\n///     );\n///\n///     border: 3px solid red;\n///   }\n///\n///   // Equivalent example using shorthand arguments\n///   div {\n///     @include vr(\n///       $font-size: 1,\n///       $height   : 2,\n///       $margin   : 1 0, // top|bottom: 1, right|left: 0\n///       $padding  : 1 0, // top|bottom: 1, right|left: 0\n///       $offset   : 3    // top|bottom: 3px\n///     );\n///\n///     border: 3px solid red;\n///   }\n@mixin vr(\n    $font-size     : null,\n    $line-height   : null,\n    $height        : null,\n    $width         : null,\n    $margin        : null,\n    $margin-top    : null,\n    $margin-bottom : null,\n    $margin-right  : null,\n    $margin-left   : null,\n    $padding       : null,\n    $padding-top   : null,\n    $padding-bottom: null,\n    $padding-right : null,\n    $padding-left  : null,\n    $offset        : null,\n    $offset-top    : null,\n    $offset-bottom : null,\n    $is-breakpoint : false,\n    $settings      : _get-root()) {\n    // Root settings\n    $root-font-size  : _to-root-px(map-get($settings, font-size));\n    $root-line-height: _to-rem(map-get($settings, line-height), $root-font-size);\n    $modular-scale   : map-get($settings, modular-scale);\n\n    // Convert margin shorthand to explicit values.\n    // Explicit values (top|bottom|left|right) override shorthand if specified.\n    @if type-of($margin) == 'list' {\n        $margin-top  : if(not $margin-top, nth($margin, 1), $margin-top);\n        $margin-right: if(not $margin-right, nth($margin, 2), $margin-right);\n\n        @if length($margin) == 2 {\n            $margin-bottom: if(not $margin-bottom, nth($margin, 1), $margin-bottom);\n            $margin-left  : if(not $margin-left, nth($margin, 2), $margin-left);\n        }\n        @if length($margin) == 3 {\n            $margin-bottom: if(not $margin-bottom, nth($margin, 3), $margin-bottom);\n            $margin-left  : if(not $margin-left, nth($margin, 2), $margin-left);\n        }\n        @if length($margin) == 4 {\n            $margin-bottom: if(not $margin-bottom, nth($margin, 3), $margin-bottom);\n            $margin-left  : if(not $margin-left, nth($margin, 4), $margin-left);\n        }\n    }\n    @else if type-of($margin) == 'number' {\n        $margin-top   : $margin;\n        $margin-bottom: $margin;\n        $margin-right : $margin;\n        $margin-left  : $margin;\n    }\n\n    // Convert padding shorthand to explicit values.\n    // Explicit values (top|bottom|left|right) override shorthand if specified.\n    @if type-of($padding) == 'list' {\n        $padding-top  : if(not $padding-top, nth($padding, 1), $padding-top);\n        $padding-right: if(not $padding-right, nth($padding, 2), $padding-right);\n\n        @if length($padding) == 2 {\n            $padding-bottom: if(not $padding-bottom, nth($padding, 1), $padding-bottom);\n            $padding-left  : if(not $padding-left, nth($padding, 2), $padding-left);\n        }\n        @if length($padding) == 3 {\n            $padding-bottom: if(not $padding-bottom, nth($padding, 3), $padding-bottom);\n            $padding-left  : if(not $padding-left, nth($padding, 2), $padding-left);\n        }\n        @if length($padding) == 4 {\n            $padding-bottom: if(not $padding-bottom, nth($padding, 3), $padding-bottom);\n            $padding-left  : if(not $padding-left, nth($padding, 4), $padding-left);\n        }\n    }\n    @else if type-of($padding) == 'number' {\n        $padding-top   : $padding;\n        $padding-bottom: $padding;\n        $padding-right : $padding;\n        $padding-left  : $padding;\n    }\n\n    // Convert offset shorthand to explicit values.\n    $offset-top   : if(not $offset-top and $offset and type-of($offset) == 'number', $offset, $offset-top);\n    $offset-top   : if(not $offset-top and $offset and type-of($offset) == 'list' and nth($offset, 1), nth($offset, 1), $offset-top);\n    $offset-bottom: if(not $offset-bottom and $offset and type-of($offset) == 'number', $offset, $offset-bottom);\n    $offset-bottom: if(not $offset-bottom and $offset and type-of($offset) == 'list' and nth($offset, 2), nth($offset, 2), $offset-bottom);\n\n    // Null zero and non-pixel offset values / Convert unitless values to px\n    $offset       : if(type-of($offset) == 'number' and _strip-unit($offset) != 0 and (unitless($offset) or unit($offset) == 'px'), _strip-unit($offset) * 1px, null);\n    $offset-top   : if(type-of($offset-top) == 'number' and _strip-unit($offset-top) != 0 and (unitless($offset-top) or unit($offset-top) == 'px'), _strip-unit($offset-top) * 1px, null);\n    $offset-bottom: if(type-of($offset-bottom) == 'number' and _strip-unit($offset-bottom) != 0 and (unitless($offset-bottom) or unit($offset-bottom) == 'px'), _strip-unit($offset-bottom) * 1px, null);\n\n    // Calculate total offset value\n    $offset-total: if($offset-top and $offset-bottom, $offset-top + $offset-bottom, null);\n    $offset-total: if(not $offset-total and $offset-top, $offset-top, $offset-total);\n    $offset-total: if(not $offset-total and $offset-bottom, $offset-bottom, $offset-total);\n\n    // Prepare margin and padding values if they are to be processed\n    $vr-margin-top    : if(type-of($margin-top) == 'number' and _strip-unit($margin-top) != 0 and unitless($margin-top), $margin-top * $root-line-height, $margin-top);\n    $vr-margin-bottom : if(type-of($margin-bottom) == 'number' and _strip-unit($margin-bottom) != 0 and unitless($margin-bottom), $margin-bottom * $root-line-height, $margin-bottom);\n    $vr-margin-right  : if(type-of($margin-right) == 'number' and _strip-unit($margin-right) != 0 and unitless($margin-right), $margin-right * $root-line-height, $margin-right);\n    $vr-margin-left   : if(type-of($margin-left) == 'number' and _strip-unit($margin-left) != 0 and unitless($margin-left), $margin-left * $root-line-height, $margin-left);\n    $vr-padding-top   : if(type-of($padding-top) == 'number' and _strip-unit($padding-top) != 0 and unitless($padding-top), $padding-top * $root-line-height, $padding-top);\n    $vr-padding-bottom: if(type-of($padding-bottom) == 'number' and _strip-unit($padding-bottom) != 0 and unitless($padding-bottom), $padding-bottom * $root-line-height, $padding-bottom);\n    $vr-padding-right : if(type-of($padding-right) == 'number' and _strip-unit($padding-right) != 0 and unitless($padding-right), $padding-right * $root-line-height, $padding-right);\n    $vr-padding-left  : if(type-of($padding-left) == 'number' and _strip-unit($padding-left) != 0 and unitless($padding-left), $padding-left * $root-line-height, $padding-left);\n\n    // Prevent zero value (breaks calc functions)\n    $vr-margin-top    : if(type-of($vr-margin-top) == 'number' and _strip-unit($vr-margin-top) == 0, _strip-unit($vr-margin-top) * 1px, $vr-margin-top);\n    $vr-margin-bottom : if(type-of($vr-margin-bottom) == 'number' and _strip-unit($vr-margin-bottom) == 0, _strip-unit($vr-margin-bottom) * 1px, $vr-margin-bottom);\n    $vr-padding-top   : if(type-of($vr-padding-top) == 'number' and _strip-unit($vr-padding-top) == 0, _strip-unit($vr-padding-top) * 1px, $vr-padding-top);\n    $vr-padding-bottom: if(type-of($vr-padding-bottom) == 'number' and _strip-unit($vr-padding-bottom) == 0, _strip-unit($vr-padding-bottom) * 1px, $vr-padding-bottom);\n\n    // Create accessible height multiplier variable for breakpoint check\n    $fixed-multiplier: null;\n\n    // Checks\n    $is-vr-margin : if($vr-margin-top or $vr-margin-bottom, true, false);\n    $is-vr-padding: if($vr-padding-top or $vr-padding-bottom, true, false);\n    $is-vr-offset : if($offset-total, true, false);\n\n    // Font Size\n    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n    @if $font-size {\n        $vr-font-size  : if(unitless($font-size), _modular-scale($font-size, $modular-scale), _to-rem($font-size, $root-font-size));\n        $multiplier    : ceil($vr-font-size / $root-line-height);\n        $vr-line-height: _to-rem($root-line-height * $multiplier, $root-font-size);\n\n        font-size: $vr-font-size;\n        line-height: if(type-of($vr-line-height) == 'string', calc(#{$vr-line-height}), $vr-line-height);\n    }\n\n    // Line Height\n    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n    @if $line-height {\n        line-height: if(type-of($line-height) == 'number' and unitless($line-height), $line-height * $root-line-height, $line-height);\n    }\n\n    // Height\n    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n    @if $height {\n        $vr-height: $height;\n\n        // Pixels\n        @if unit($height) == 'px' {\n            $fixed-multiplier: ceil(_to-rem($height, $root-font-size) / $root-line-height);\n\n            // Add offset to height if box sizing is border-box\n            $vr-height       : if($is-vr-offset and $vr-box-sizing == border-box, $height + $offset-total, $height);\n            $remainder       : \"(#{$root-line-height * $fixed-multiplier} - #{$vr-height})\";\n            $vr-margin-top   : if($vr-margin-top, \"#{$vr-margin-top} + (#{$remainder} / 2)\", \"#{$remainder} / 2\");\n            $vr-margin-bottom: if($vr-margin-bottom, \"#{$vr-margin-bottom} + (#{$remainder} / 2)\", \"#{$remainder} / 2\");\n        }\n        // Other Units\n        @else {\n            $vr-height: if(unitless($height), $height * $root-line-height, _to-rem($height, $root-font-size));\n\n            @if $is-vr-margin {\n                $multiplier      : ceil($vr-height / $root-line-height);\n                // Force zero remainder for unitless values. This is a fix for\n                // compounded rounding error adjustment in _to-rem mixin.\n                $remainder       : if(unitless($vr-height), 0, ($root-line-height * $multiplier) - $vr-height);\n                $vr-margin-top   : if($vr-margin-top, $vr-margin-top + ($remainder / 2), $vr-margin-top);\n                $vr-margin-bottom: if($vr-margin-bottom, $vr-margin-bottom + ($remainder / 2), $vr-margin-bottom);\n            }\n\n            // Add offset to height if box sizing is border-box\n            $vr-height: if($is-vr-offset and $vr-box-sizing == border-box, \"#{$vr-height} + #{$offset-total}\", $vr-height);\n        }\n\n        // Fixed-height rules do not need to be recalcaulated for media queries\n        @if unit($height) != 'px' or not $is-breakpoint {\n            height: if(type-of($vr-height) == 'string', calc(#{$vr-height}), $vr-height);\n        }\n    }\n\n    // Width\n    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n    @if $width {\n        width: if(type-of($width) == 'number' and unitless($width), $width * $root-line-height, $width);\n    }\n\n    // Margins & Padding\n    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n    // Offset\n    @if $is-vr-offset {\n        $transform-value: if($offset-top, translateY(-#{$offset-top}), null);\n        // Shift the element up for the top offset\n        -webkit-transform: $transform-value;\n            -ms-transform: $transform-value;\n                transform: $transform-value;\n\n        @if $vr-margin-bottom {\n            // Adjacent elements with an offset and a bottom margin break\n            // the vertical rhythm due to margin collapse behavior on block\n            // level elements. Unfortunately, the only way to get around this\n            // is to change the display type of all elemnts that have both a\n            // bottom margin and an offset defined. The downside is that\n            // changing the display type prevents the standard margin collapse\n            // behavior which may be expected.\n            display: inline-block;\n\n            // DISABLED:\n            // Setting the display to inline-block also prevents the standard\n            // \"fill the horizontal space\" behavior of block-level elements.\n            // The rule below is an attempt to address the issue by setting\n            // the width to 100% if no horizontal margins have been defined.\n            // This allows multi-line content to force the element to fill the\n            // horizontal space.\n            // width: if(not $vr-margin-right and not $vr-margin-left, 100%, null);\n\n            // Set the top margin to zero if a top margin is not defined to\n            // avoid double margins. This allows offsets to function without\n            // additional rules when only a bottom margin is defined. The\n            // downside is that setting the top margin to zero may override an\n            // exisitng setting from another rule. In this case, the top margin\n            // will need to be redefined in the same mixin call as the offset.\n            $vr-margin-top: if($vr-margin-top, $vr-margin-top, 0);\n\n            // Subtract the total offset from the bottom margin\n            $vr-margin-bottom: calc((#{$vr-margin-bottom}) - #{$offset-total});\n        }\n        @else {\n            // Subtract the total offset from the bottom margin\n            $vr-margin-bottom: -#{$offset-total};\n        }\n    }\n    @else {\n        $vr-margin-top   : if(type-of($vr-margin-top) == 'string', calc(#{$vr-margin-top}), $vr-margin-top);\n        $vr-margin-bottom: if(type-of($vr-margin-bottom) == 'string', calc(#{$vr-margin-bottom}), $vr-margin-bottom);\n    }\n\n    // Convert margin values to shorthand if possible\n    @if $vr-margin-top and $vr-margin-bottom and $vr-margin-left and $vr-margin-right {\n        @if $vr-margin-left == $vr-margin-right {\n            @if $vr-margin-top == $vr-margin-bottom {\n                @if $vr-margin-top == $vr-margin-left {\n                    margin: $vr-margin-top;\n                }\n                @else {\n                    margin: $vr-margin-top $vr-margin-left;\n                }\n            }\n            @else {\n                margin: $vr-margin-top $vr-margin-left $vr-margin-bottom;\n            }\n        }\n        @else {\n            margin: $vr-margin-top $vr-margin-right $vr-margin-bottom $vr-margin-left;\n        }\n    }\n    @else {\n        margin-top   : $vr-margin-top;\n        margin-bottom: $vr-margin-bottom;\n        margin-right : $vr-margin-right;\n        margin-left  : $vr-margin-left;\n    }\n\n    // Convert margin values to shorthand if possible\n    @if $vr-padding-top and $vr-padding-bottom and $vr-padding-left and $vr-padding-right {\n        @if $vr-padding-left == $vr-padding-right {\n            @if $vr-padding-top == $vr-padding-bottom {\n                @if $vr-padding-top == $vr-padding-left {\n                    padding: $vr-padding-top;\n                }\n                @else {\n                    padding: $vr-padding-top $vr-padding-left;\n                }\n            }\n            @else {\n                padding: $vr-padding-top $vr-padding-left $vr-padding-bottom;\n            }\n        }\n        @else {\n            padding: $vr-padding-top $vr-padding-right $vr-padding-bottom $vr-padding-left;\n        }\n    }\n    @else {\n        padding-top   : $vr-padding-top;\n        padding-bottom: $vr-padding-bottom;\n        padding-right : $vr-padding-right;\n        padding-left  : $vr-padding-left;\n    }\n\n    // Media Queries\n    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n    $selector   : &;\n    $is-rendered: if(index($_vr-rendered, $selector), true, false);\n\n    @if not $is-breakpoint and not $is-rendered {\n        // Store settings\n        $prev-root-font-size  : $root-font-size;\n        $prev-line-height     : $root-line-height;\n        $prev-modular-scale   : $modular-scale;\n        $prev-fixed-multiplier: $fixed-multiplier;\n\n        // Repeat for each breakpoint\n        @each $breakpoint, $settings in _get-settings() {\n            // Settings\n            $root-font-size  : if(map-has-key($settings, font-size), _to-root-px(map-get($settings, font-size)), _to-root-px($prev-root-font-size));\n            $root-line-height: if(map-has-key($settings, line-height), _to-rem(map-get($settings, line-height), $root-font-size), _to-rem($prev-line-height, $root-font-size));\n            $modular-scale   : if(map-has-key($settings, modular-scale), map-get($settings, modular-scale), $prev-modular-scale);\n            $fixed-multiplier: if($prev-fixed-multiplier, ceil(_to-rem($height, $root-font-size) / $root-line-height), $prev-fixed-multiplier);\n\n            // Setting map\n            $settings: (\n                font-size    : $root-font-size,\n                line-height  : $root-line-height,\n                modular-scale: $modular-scale\n            );\n\n            // Checks\n            $is-root             : if($breakpoint == root, true, false);\n            $is-new-line-height  : if($root-line-height != $prev-line-height, true, false);\n            $is-new-modular-scale: if($modular-scale != $prev-modular-scale, true, false);\n            $is-new-multiplier   : if($fixed-multiplier and $fixed-multiplier != $prev-fixed-multiplier, true, false);\n\n            // Generate recalculated rules\n            @if not $is-root and ($is-new-multiplier or $is-new-line-height or $is-new-modular-scale) {\n                @media (min-width: #{$breakpoint}) {\n                    @include vr(\n                        $font-size,\n                        $line-height,\n                        $height,\n                        $width,\n                        $margin,\n                        $margin-top,\n                        $margin-bottom,\n                        $margin-right,\n                        $margin-left,\n                        $padding,\n                        $padding-top,\n                        $padding-bottom,\n                        $padding-right,\n                        $padding-left,\n                        $offset,\n                        $offset-top,\n                        $offset-bottom,\n                        $is-breakpoint: true,\n                        $settings: $settings\n                    );\n                }\n            }\n\n            // Store settings\n            $prev-root-font-size  : $root-font-size;\n            $prev-line-height     : $root-line-height;\n            $prev-modular-scale   : $modular-scale;\n            $prev-fixed-multiplier: $fixed-multiplier;\n        }\n\n        // Add selector to rendered list\n        $_vr-rendered: append($_vr-rendered, $selector) !global;\n    }\n}\n\n/// Renders the vertical rhythm grid lines as a background image and applies\n/// the highlight color as a semi-transparent background to all child elements.\n///\n/// @param {Color} $color [null] - Grid line and element highlight color\n/// @param {Boolean} $lines [true] - Displays vertical rhythm grid lines\n/// @param {Boolean} $highlight [true] - Sets the background color of all\n///   elements to a semi-transparent variation of the grid color specified to\n///   help verify alignment with the vertical rhythm grid.\n/// @param {Boolean} $detail [true] - Displays a floating panel with the active\n///   breakpoint width, font-size, line-height and modular scale. This is rendered\n///   as psuedo content (`:before`) on the `<body>` element.\n///\n/// @example scss SCSS\n///   // Call the vertical rhythm reset mixin at root\n///   @include vr-reset();\n///\n///   // Call the grid mixin\n///   body {\n///     @include @vr-grid();\n///   }\n@mixin vr-grid($color: null, $lines: true, $highlight: true, $detail: true) {\n    // Placeholder for breakpoint settings\n    $prev-font-size    : _get-root(font-size);\n    $prev-line-height  : _get-root(line-height);\n    $prev-grid-color   : if($color, $color, _get-root(grid-color));\n    $prev-modular-scale: _get-root(modular-scale);\n\n    @each $breakpoint, $settings in _get-settings() {\n        // Variables\n        $font-size    : if(map-has-key($settings, font-size), _to-root-px(map-get($settings, font-size)), _to-root-px($prev-font-size));\n        $line-height  : if(map-has-key($settings, line-height), _to-rem(map-get($settings, line-height), $font-size), _to-rem($prev-line-height, $font-size));\n        $modular-scale: if(map-has-key($settings, modular-scale), map-get($settings, modular-scale), $prev-modular-scale);\n        $grid-color   : if(not $color and map-has-key($settings, grid-color), map-get($settings, grid-color), $prev-grid-color);\n        $media-query  : if($breakpoint != root, \"(min-width: #{$breakpoint})\", false);\n\n        // Checks\n        $is-new-grid-color: if($breakpoint == root or $grid-color != $prev-grid-color, true, false);\n\n        // Generate grid settings\n        @include _maybe-query($media-query) {\n            $grid-size           : round(_strip-unit($line-height) * _strip-unit($font-size));\n            $grid-line-color     : transparentize($grid-color, 0.5);\n            $grid-highlight-color: transparentize($grid-color, 0.9);\n            $grid-text-color     : if(lightness($grid-color) > 52, #000, #fff);\n\n            // Display detail as pseudo content\n            @if $detail {\n                &:before {\n                    /* Vertical Rhythm Reset: Grid Detail */\n                    content: \"Vertical Rhythm Reset\\A\\\n --------------------------\\A\\\n breakpoint   : #{$breakpoint}\\A\\\n font-size    : #{$font-size}\\A\\\n line-height  : #{round($font-size * _strip-unit($line-height))}\\A\\\n modular-scale: #{$modular-scale}\" !important;\n                    display: table !important; // Fix for flexbox\n                    position: fixed !important;\n                    z-index: 2147483647 !important;\n                    bottom: 1vh !important;\n                    right: 1vh !important;\n                    padding: 10px 20px !important;\n                    background: transparentize($grid-color, 0.2) !important;\n                    border-radius: 4px !important;\n                    color: $grid-text-color !important;\n                    font-family: \"Lucida Console\", \"Consolas\", Monaco, monospace !important;\n                    font-size: 12px !important;\n                    line-height: 20px !important;\n                    white-space: pre !important;\n                }\n            }\n\n            // Grid lines\n            @if $lines {\n                $grid-svg: \"data:image/svg+xml;charset=utf8,\\\n%3Csvg width='#{$grid-size}px' height='#{$grid-size}px' viewBox='0 0 #{$grid-size} #{$grid-size}' xmlns='http://www.w3.org/2000/svg'%3E\\\n%3Cdefs%3E\\\n%3Cpattern id='grid' height='#{$grid-size}' width='1000' patternUnits='userSpaceOnUse'%3E\\\n%3Cpath d='M #{$grid-size} 0 L -1 0 -1 #{$grid-size}' fill='none' stroke='#{$grid-line-color}' stroke-width='1' /%3E\\\n%3C/pattern%3E\\\n%3C/defs%3E\\\n%3Crect width='#{$grid-size}px' height='#{$grid-size}px' fill='url(%23grid)' /%3E\\\n%3C/svg%3E\";\n\n                /* Vertical Rhythm Reset: Grid Lines */\n                background-image: url($grid-svg) !important;\n                background-color: transparent !important;\n            }\n\n            // Grid highlight\n            @if $highlight {\n                @if $is-new-grid-color {\n                    *:not(hr) {\n                        /* Vertical Rhythm Reset: Grid Highlight */\n                        background-color: $grid-highlight-color !important;\n                    }\n                }\n            }\n            // Hide the background so the grid lines will be visible\n            @else if $lines {\n                *:not(hr) {\n                    /* Vertical Rhythm Reset: Grid Highlight */\n                    background: transparent !important;\n                }\n            }\n        }\n\n        // Store settings for comparison during next iteration\n        $prev-font-size    : $font-size;\n        $prev-line-height  : $line-height;\n        $prev-grid-color   : $grid-color;\n        $prev-modular-scale: $modular-scale;\n    }\n}\n\n/// Generates the CSS reset/normalization, vertical rhythm grid and CSS helper\n/// rules and classes along with media queries and recalculated breakpoint\n/// values.\n///\n/// This mixin is typically called at the root of your SCSS file without\n/// any arguments specified. This allows the mixin to use the default values\n/// specified with `$vr-font-size`, `$vr-line-height`, `$vr-modular-scale`,\n/// `$vr-grid-color`, `$vr-breakpoints` and `$vr-helpers` variables. As a\n/// convenience, these same global variables can be set using mixin arguments.\n///\n/// @param {String} $box-sizing  [$vr-box-sizing]\n///   See `$vr-box-sizing`\n/// @param {Number|Length(px|rem|%)} $font-size   [$vr-font-size]\n///   See `$vr-font-size`\n/// @param {Number|Length(px|rem|%)} $line-height [$vr-line-height]\n///   See `$vr-line-height`\n/// @param {Number|String} $modular-scale         [$vr-modular-scale]\n///   See `$vr-modular-scale`\n/// @param {Color} $grid-color                    [$vr-grid-color]\n///   See `$vr-grid-color`\n/// @param {Map|false} $breakpoints               [$vr-breakpoints]\n///   See `$vr-breakpoints`\n/// @param {Map|false} $helpers                   [$vr-helpers]\n///   See `$vr-helpers`\n///\n/// @example scss SCSS: Reset using global variables\n///   // Global variables\n///   $vr-box-sizing   : border-box;\n///   $vr-font-size    : 14px;\n///   $vr-line-height  : 1.5;\n///   $vr-modular-scale: minor-third;\n///   $vr-grid-color   : rgb(233, 30, 99);\n///   $vr-breakpoints  : (...);\n///   $vr-helpers      : (...);\n///\n///   // Call the mixin at root\n///   @include vr-reset();\n///\n/// @example scss SCSS: Reset using mixin arguments\n///   // Call the mixin at root\n///   // Global variables will be updated with specified values\n///   // Omitted values will default to global variables\n///   @include vr-reset(\n///     $box-sizing   : border-box,\n///     $font-size    : 14px,\n///     $line-height  : 1.5,\n///     $modular-scale: minor-third,\n///     $grid-color   : rgb(233, 30, 99),\n///     $breakpoints  : (...),\n///     $helpers      : (...)\n///   );\n@mixin vr-reset(\n    $box-sizing        : $vr-box-sizing,\n    $font-size         : $vr-font-size,\n    $line-height       : $vr-line-height,\n    $modular-scale     : $vr-modular-scale,\n    $grid-color        : $vr-grid-color,\n    $breakpoints       : $vr-breakpoints,\n    $helpers           : $vr-helpers) {\n    // Update globals\n    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n    $vr-box-sizing   : $box-sizing    !global;\n    $vr-font-size    : $font-size     !global;\n    $vr-line-height  : $line-height   !global;\n    $vr-modular-scale: $modular-scale !global;\n    $vr-grid-color   : $grid-color    !global;\n    $vr-breakpoints  : $breakpoints   !global;\n    $vr-helpers      : $helpers       !global;\n\n    // Variables\n    $selector: &;\n\n    // Base\n    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n    // Render base rules only if they have not previously been rendered at root\n    @if not $_vr-is-root-reset {\n        $_vr-is-root-reset: if($selector, false, true) !global;\n\n        /* Vertical Rhythm Reset: Base */\n        *,\n        *:before,\n        *:after {\n            box-sizing: inherit;\n            margin-top: 0;\n            margin-bottom: 0;\n            padding-top: 0;\n            padding-bottom: 0;\n            font-family: inherit;\n            font-size: inherit;\n\n            // Required for inline elements for alignment\n            vertical-align: bottom;\n        }\n\n        html {\n            box-sizing: $vr-box-sizing;\n            font-family: sans-serif;\n\n            // Prevent font-size adjustments on orientation change\n            -webkit-text-size-adjust: 100%;\n               -moz-text-size-adjust: 100%;\n                -ms-text-size-adjust: 100%;\n        }\n\n        body {\n            margin: 0;\n            background: #fff;\n            color: #000;\n        }\n\n        // Border\n        button,\n        fieldset,\n        input:not([type=\"radio\"]):not([type=\"checkbox\"]),\n        select,\n        textarea {\n            border-width: 1px;\n            border-style: solid;\n            border-color: $_vr-border-color;\n        }\n\n        em,\n        i {\n            font-style: italic;\n        }\n\n        // Fieldset\n        // https://thatemil.com/blog/2015/01/03/reset-your-fieldset/\n        fieldset {\n            padding-top: 0.01em;\n            padding-bottom: 0;\n            min-width: 0;\n\n            body:not(:-moz-handler-blocked) & {\n                display: table-cell;\n            }\n        }\n\n        iframe {\n            border: 0;\n        }\n\n        // Small Text\n        small,\n        sub,\n        sup {\n            font-size: 0.875em;\n        }\n\n        // Margins\n        input[type=\"radio\"],\n        input[type=\"checkbox\"] {\n            // Attempt to center with base vertical-alignment (see * above)\n            margin-bottom: 0.325em;\n        }\n\n        // Misc\n        hr {\n            position: relative;\n            border: 0;\n\n            &:after {\n                content: '';\n                position: absolute;\n                top: 50%;\n                left: 0;\n                right: 0;\n                height: 1px;\n                background: $_vr-border-color;\n            }\n        }\n\n        sub,\n        sup {\n            position: relative;\n            line-height: 0;\n        }\n\n        sub {\n            vertical-align: sub;\n        }\n\n        sup {\n            vertical-align: super;\n        }\n\n        table {\n            border-collapse: collapse;\n            border-spacing: 0;\n        }\n\n        // Normalize.css (subset)\n        // https://necolas.github.io/normalize.css/\n        // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n        // Add the correct display in IE 9-\n        // 1. Add the correct display in Edge, IE, and Firefox\n        // 2. Add the correct display in IE\n        article,\n        aside,\n        details, // 1\n        figcaption,\n        figure,\n        footer,\n        header,\n        main, // 2\n        menu,\n        nav,\n        section,\n        summary { // 1\n            display: block;\n        }\n\n        // Add the correct display in IE 9-\n        audio,\n        canvas,\n        progress,\n        video {\n            display: inline-block;\n        }\n\n        // 1. Correct the inheritance and scaling of font size in all browsers.\n        code,\n        kbd,\n        pre,\n        samp {\n            font-family: monospace, monospace; // 1\n        }\n\n        // Add the correct display in iOS 4-7\n        audio:not([controls]) {\n            display: none;\n            height: 0;\n        }\n\n        // Add the correct display in IE 10-\n        // 1. Add the correct display in IE\n        template, // 1\n        [hidden] {\n            display: none;\n        }\n\n        // Remove the gray background on active links in IE 10\n        a {\n            background-color: transparent;\n        }\n\n        // Remove the outline on focused links when they are also active or\n        // hovered in all browsers (opinionated)\n        a:active,\n        a:hover {\n            outline-width: 0;\n        }\n\n        // 1. Remove the bottom border in Firefox 39-\n        // 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and\n        //    Safari\n        abbr[title] {\n            border-bottom: none; // 1\n            text-decoration: underline; //2\n            text-decoration: underline dotted; //2\n        }\n\n        // Add the correct font weight in Chrome, Edge, and Safari\n        b,\n        strong {\n            font-weight: bolder;\n        }\n\n        // Add the correct font style in Android 4.3-\n        dfn {\n            font-style: italic;\n        }\n\n        // Add the correct background and color in IE 9-\n        mark {\n            background-color: #ff0;\n            color: #000;\n        }\n\n        // Remove the border on images inside links in IE 10-\n        img {\n            border-style: none;\n        }\n\n        // Hide the overflow in IE\n        svg:not(:root) {\n            overflow: hidden;\n        }\n\n        // Show the overflow in IE\n        // 1. Show the overflow in Edge\n        // 2. Show the overflow in Edge, Firefox, and IE\n        button,\n        input, // 1\n        select { //2\n            overflow: visible;\n        }\n\n        // Remove the inheritence of text transform in Edge, Firefox, and IE\n        // 1. Remove the inheritence of text transform in Firefox\n        button,\n        select { // 1\n            text-transform: none;\n        }\n\n        // 1. Change the cursor in all browsers (opinionated)\n        // 2. Correct the inability to style clickable types in iOS and Safari\n        button,\n        [type=\"button\"],\n        [type=\"reset\"],\n        [type=\"submit\"] {\n            cursor: pointer;\n            -webkit-appearance: button; // 2\n        }\n\n        // Restore the default cursor to disabled elements unset by the previous\n        // rule\n        [disabled] {\n            cursor: default;\n        }\n\n        // 1. Prevent a WebKit bug where (2) destroys native `audio` and `video`\n        //    controls in Android 4\n        // 2. Correct the inability to style clickable types in iOS\n        button,\n        html [type=\"button\"], // 1\n        [type=\"reset\"],\n        [type=\"submit\"] {\n            -webkit-appearance: button; //2\n        }\n\n        // Remove the inner border and padding in Firefox\n        button::-moz-focus-inner,\n        [type=\"button\"]::-moz-focus-inner,\n        [type=\"reset\"]::-moz-focus-inner,\n        [type=\"submit\"]::-moz-focus-inner {\n            border-style: none;\n            padding: 0;\n        }\n\n        // Restore the focus styles unset by the previous rule\n        button:-moz-focusring,\n        [type=\"button\"]:-moz-focusring,\n        [type=\"reset\"]:-moz-focusring,\n        [type=\"submit\"]:-moz-focusring {\n            outline: 1px dotted ButtonText;\n        }\n\n        // 1. Correct the text wrapping in Edge and IE\n        // 2. Correct the color inheritance from `fieldset` elements in IE\n        // 3. Remove the padding so developers are not caught out when they zero\n        //    out `fieldset` elements in all browsers\n        legend {\n            box-sizing: border-box; // 1\n            color: inherit; //2\n            display: table; // 1\n            max-width: 100%; // 1\n            padding: 0; // 3\n            white-space: normal; // 1\n        }\n\n        // Remove the default vertical scrollbar in IE\n        textarea {\n            overflow: auto;\n        }\n\n        // 1. Add the correct box sizing in IE 10-\n        // 2. Remove the padding in IE 10-\n        [type=\"checkbox\"],\n        [type=\"radio\"] {\n            box-sizing: border-box; // 1\n            padding: 0; //2\n        }\n\n        // Correct the cursor style of increment and decrement buttons in Chrome\n        [type=\"number\"]::-webkit-inner-spin-button,\n        [type=\"number\"]::-webkit-outer-spin-button {\n            height: auto;\n        }\n\n        // 1. Correct the odd appearance of search inputs in Chrome and Safari\n        // 2. Correct the outline style in Safari\n        [type=\"search\"] {\n            -webkit-appearance: textfield; // 1\n            outline-offset: -2px; // 2\n        }\n\n        // Remove the inner padding and cancel buttons in Chrome on OS X and\n        // Safari on OS X\n        [type=\"search\"]::-webkit-search-cancel-button,\n        [type=\"search\"]::-webkit-search-decoration {\n            -webkit-appearance: none;\n        }\n\n        // 1. Correct the inability to style clickable types in iOS and Safari.\n        // 2. Change font properties to `inherit` in Safari.\n       ::-webkit-file-upload-button {\n            -webkit-appearance: button; // 1\n            font: inherit; // 2\n       }\n    }\n\n    // Alignment\n    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n    // Placeholder for breakpoint settings\n    $prev-font-size    : _get-root(font-size);\n    $prev-line-height  : _get-root(line-height);\n    $prev-modular-scale: _get-root(modular-scale);\n\n    @each $breakpoint, $settings in _get-settings() {\n        // Variables\n        $font-size    : if(map-has-key($settings, font-size), _to-root-px(map-get($settings, font-size)), _to-root-px($prev-font-size));\n        $line-height  : if(map-has-key($settings, line-height), _to-rem(map-get($settings, line-height), $font-size), _to-rem($prev-line-height, $font-size));\n        $modular-scale: if(map-has-key($settings, modular-scale), map-get($settings, modular-scale), $prev-modular-scale);\n\n        // Checks\n        $is-new-font-size    : if($breakpoint == root or $font-size != $prev-font-size, true, false);\n        $is-new-line-height  : if($breakpoint == root or $line-height != $prev-line-height, true, false);\n        $is-new-modular-scale: if($breakpoint == root or $modular-scale != $prev-modular-scale, true, false);\n\n        // Generate media query string\n        $media-query  : if($breakpoint != root, \"(min-width: #{$breakpoint})\", false);\n        $media-comment: if($media-query, \"Vertical Rhythm Reset: Breakpoint Alignment\", \"Vertical Rhythm Reset: Alignment\");\n\n        // Store settings as map to pass to mixins below\n        $settings: (\n            font-size    : $font-size,\n            line-height  : $line-height,\n            modular-scale: $modular-scale\n        );\n\n        @include _maybe-query($media-query, $media-comment) {\n            @if $is-new-font-size {\n                :root {\n                    font-size: $font-size;\n                }\n            }\n\n            @if $is-new-line-height {\n                *,\n                *:before,\n                *:after {\n                    line-height: $line-height;\n                }\n\n                // Height\n                button,\n                input:not([type=radio]):not([type=checkbox]),\n                option,\n                select:not([multiple]) {\n                    @include vr($height: 1, $is-breakpoint: true, $settings: $settings);\n                }\n\n                audio {\n                    @include vr($height: 2, $is-breakpoint: true, $settings: $settings);\n                }\n\n                hr {\n                    @include vr($height: 2, $is-breakpoint: true, $settings: $settings);\n                }\n\n                select[multiple],\n                textarea {\n                    @include vr($height: 4, $is-breakpoint: true, $settings: $settings);\n                }\n\n                iframe,\n                video {\n                    @include vr($height: 8, $is-breakpoint: true, $settings: $settings);\n                }\n\n                // Margins\n                h1 {\n                    @include vr($margin-top: 0, $margin-bottom: 1, $is-breakpoint: true, $settings: $settings);\n                }\n\n                blockquote,\n                dl,\n                form,\n                h2,\n                h3,\n                h4,\n                h5,\n                h6,\n                ol,\n                p,\n                pre,\n                table,\n                ul {\n                    @include vr($margin-top: 1, $margin-bottom: 1, $is-breakpoint: true, $settings: $settings);\n                }\n\n                fieldset {\n                    @include vr($margin: 1 0, $offset-bottom: 1px, $is-breakpoint: true, $settings: $settings);\n                    width: 100%;\n                }\n            }\n\n            // Font Size\n            @if $modular-scale and ($is-new-line-height or $is-new-modular-scale) {\n                h1 {\n                    @include vr($font-size: 4, $is-breakpoint: true, $settings: $settings);\n                }\n\n                h2 {\n                    @include vr($font-size: 3, $is-breakpoint: true, $settings: $settings);\n                }\n\n                h3 {\n                    @include vr($font-size: 2, $is-breakpoint: true, $settings: $settings);\n                }\n\n                h4 {\n                    @include vr($font-size: 1, $is-breakpoint: true, $settings: $settings);\n                }\n\n                h5 {\n                    @include vr($font-size: 0, $is-breakpoint: true, $settings: $settings);\n                }\n\n                h6 {\n                    @include vr($font-size: -1, $is-breakpoint: true, $settings: $settings);\n                }\n            }\n\n            // Generate vertical rhythm CSS helpers\n            @if type-of($vr-helpers) == 'map' {\n                @each $property-key, $property-map in $vr-helpers {\n                    $count : map-get($property-map, count);\n                    $prefix: map-get($property-map, prefix);\n                    $suffix: map-get($property-map, suffix);\n\n                    @if $count and ($prefix or $suffix) {\n                        // Font size\n                        @if $property-key == 'font-size' and $modular-scale and ($is-new-line-height or $is-new-modular-scale) {\n                            @for $i from 0 through $count {\n                                .#{$prefix}#{$i}#{$suffix} {\n                                    @include vr($font-size: $i, $is-breakpoint: true, $settings: $settings);\n                                }\n                            }\n                        }\n\n                        @if $is-new-line-height {\n                            // Line Height\n                            @if $property-key == 'line-height' {\n                                @for $i from 1 through $count {\n                                    .#{$prefix}#{$i}#{$suffix} {\n                                        @include vr($line-height: $i, $is-breakpoint: true, $settings: $settings);\n                                    }\n                                }\n                            }\n\n                            // Height\n                            @if $property-key == 'height' {\n                                @for $i from 1 through $count {\n                                    [height=\"#{$i}\"],\n                                    select[multiple][size=\"#{$i}\"],\n                                    textarea[rows=\"#{$i}\"],\n                                    .#{$prefix}#{$i}#{$suffix} {\n                                        @include vr($height: $i, $is-breakpoint: true, $settings: $settings);\n                                    }\n                                }\n                            }\n\n                            // Width\n                            @if $property-key == 'width' {\n                                @for $i from 1 through $count {\n                                    .#{$prefix}#{$i}#{$suffix} {\n                                        @include vr($width: $i, $is-breakpoint: true, $settings: $settings);\n                                    }\n                                }\n                            }\n\n                            // Margin\n                            @if $property-key == 'margin' {\n                                @for $i from 1 through $count {\n                                    .#{$prefix}#{$i}#{$suffix} {\n                                        @include vr($margin: $i, $is-breakpoint: true, $settings: $settings);\n                                    }\n                                }\n                            }\n                            @if $property-key == 'margin-top' {\n                                @for $i from 1 through $count {\n                                    .#{$prefix}#{$i}#{$suffix} {\n                                        @include vr($margin-top: $i, $is-breakpoint: true, $settings: $settings);\n                                    }\n                                }\n                            }\n                            @if $property-key == 'margin-bottom' {\n                                @for $i from 1 through $count {\n                                    .#{$prefix}#{$i}#{$suffix} {\n                                        @include vr($margin-bottom: $i, $is-breakpoint: true, $settings: $settings);\n                                    }\n                                }\n                            }\n\n                            // Padding\n                            @if $property-key == 'padding' {\n                                @for $i from 1 through $count {\n                                    .#{$prefix}#{$i}#{$suffix} {\n                                        @include vr($padding: $i, $is-breakpoint: true, $settings: $settings);\n                                    }\n                                }\n                            }\n                            @if $property-key == 'padding-top' {\n                                @for $i from 1 through $count {\n                                    .#{$prefix}#{$i}#{$suffix} {\n                                        @include vr($padding-top: $i, $is-breakpoint: true, $settings: $settings);\n                                    }\n                                }\n                            }\n                            @if $property-key == 'padding-bottom' {\n                                @for $i from 1 through $count {\n                                    .#{$prefix}#{$i}#{$suffix} {\n                                        @include vr($padding-bottom: $i, $is-breakpoint: true, $settings: $settings);\n                                    }\n                                }\n                            }\n\n                            // Offsets\n                            @if $property-key == 'offset' {\n                                @for $i from 1 through $count {\n                                    .#{$prefix}#{$i}#{$suffix} {\n                                        @include vr($offset: $i * 1px, $is-breakpoint: true, $settings: $settings);\n                                    }\n                                }\n                            }\n                            @if $property-key == 'offset-top' {\n                                @for $i from 1 through $count {\n                                    .#{$prefix}#{$i}#{$suffix} {\n                                        @include vr($offset-top: $i * 1px, $is-breakpoint: true, $settings: $settings);\n                                    }\n                                }\n                            }\n                            @if $property-key == 'offset-bottom' {\n                                @for $i from 1 through $count {\n                                    .#{$prefix}#{$i}#{$suffix} {\n                                        @include vr($offset-bottom: $i * 1px, $is-breakpoint: true, $settings: $settings);\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        // Store settings for comparison during next iteration\n        $prev-font-size    : $font-size;\n        $prev-line-height  : $line-height;\n        $prev-modular-scale: $modular-scale;\n    }\n\n    @media only screen and (max-device-width: 1024px) and (-webkit-min-device-pixel-ratio: 2) {\n        /* Vertical Rhythm Reset: Fix for mobile select[multiple] elements */\n        select[multiple],\n        select[multiple][size] {\n            @include vr($height: 1, $is-breakpoint: true);\n        }\n    }\n}\n","/* Vertical Rhythm Reset: Base */\n*,\n*:before,\n*:after {\n  box-sizing: inherit;\n  margin-top: 0;\n  margin-bottom: 0;\n  padding-top: 0;\n  padding-bottom: 0;\n  font-family: inherit;\n  font-size: inherit;\n  vertical-align: bottom; }\n\nhtml {\n  box-sizing: border-box;\n  font-family: sans-serif;\n  -webkit-text-size-adjust: 100%;\n  -moz-text-size-adjust: 100%;\n  -ms-text-size-adjust: 100%; }\n\nbody {\n  margin: 0;\n  background: #fff;\n  color: #000; }\n\nbutton,\nfieldset,\ninput:not([type=\"radio\"]):not([type=\"checkbox\"]),\nselect,\ntextarea {\n  border-width: 1px;\n  border-style: solid;\n  border-color: #808080; }\n\nem,\ni {\n  font-style: italic; }\n\nfieldset {\n  padding-top: 0.01em;\n  padding-bottom: 0;\n  min-width: 0; }\n  body:not(:-moz-handler-blocked) fieldset {\n    display: table-cell; }\n\niframe {\n  border: 0; }\n\nsmall,\nsub,\nsup {\n  font-size: 0.875em; }\n\ninput[type=\"radio\"],\ninput[type=\"checkbox\"] {\n  margin-bottom: 0.325em; }\n\nhr {\n  position: relative;\n  border: 0; }\n  hr:after {\n    content: '';\n    position: absolute;\n    top: 50%;\n    left: 0;\n    right: 0;\n    height: 1px;\n    background: #808080; }\n\nsub,\nsup {\n  position: relative;\n  line-height: 0; }\n\nsub {\n  vertical-align: sub; }\n\nsup {\n  vertical-align: super; }\n\ntable {\n  border-collapse: collapse;\n  border-spacing: 0; }\n\narticle,\naside,\ndetails,\nfigcaption,\nfigure,\nfooter,\nheader,\nmain,\nmenu,\nnav,\nsection,\nsummary {\n  display: block; }\n\naudio,\ncanvas,\nprogress,\nvideo {\n  display: inline-block; }\n\ncode,\nkbd,\npre,\nsamp {\n  font-family: monospace, monospace; }\n\naudio:not([controls]) {\n  display: none;\n  height: 0; }\n\ntemplate,\n[hidden] {\n  display: none; }\n\na {\n  background-color: transparent; }\n\na:active,\na:hover {\n  outline-width: 0; }\n\nabbr[title] {\n  border-bottom: none;\n  text-decoration: underline;\n  text-decoration: underline dotted; }\n\nb,\nstrong {\n  font-weight: bolder; }\n\ndfn {\n  font-style: italic; }\n\nmark {\n  background-color: #ff0;\n  color: #000; }\n\nimg {\n  border-style: none; }\n\nsvg:not(:root) {\n  overflow: hidden; }\n\nbutton,\ninput,\nselect {\n  overflow: visible; }\n\nbutton,\nselect {\n  text-transform: none; }\n\nbutton,\n[type=\"button\"],\n[type=\"reset\"],\n[type=\"submit\"] {\n  cursor: pointer;\n  -webkit-appearance: button; }\n\n[disabled] {\n  cursor: default; }\n\nbutton,\nhtml [type=\"button\"],\n[type=\"reset\"],\n[type=\"submit\"] {\n  -webkit-appearance: button; }\n\nbutton::-moz-focus-inner,\n[type=\"button\"]::-moz-focus-inner,\n[type=\"reset\"]::-moz-focus-inner,\n[type=\"submit\"]::-moz-focus-inner {\n  border-style: none;\n  padding: 0; }\n\nbutton:-moz-focusring,\n[type=\"button\"]:-moz-focusring,\n[type=\"reset\"]:-moz-focusring,\n[type=\"submit\"]:-moz-focusring {\n  outline: 1px dotted ButtonText; }\n\nlegend {\n  box-sizing: border-box;\n  color: inherit;\n  display: table;\n  max-width: 100%;\n  padding: 0;\n  white-space: normal; }\n\ntextarea {\n  overflow: auto; }\n\n[type=\"checkbox\"],\n[type=\"radio\"] {\n  box-sizing: border-box;\n  padding: 0; }\n\n[type=\"number\"]::-webkit-inner-spin-button,\n[type=\"number\"]::-webkit-outer-spin-button {\n  height: auto; }\n\n[type=\"search\"] {\n  -webkit-appearance: textfield;\n  outline-offset: -2px; }\n\n[type=\"search\"]::-webkit-search-cancel-button,\n[type=\"search\"]::-webkit-search-decoration {\n  -webkit-appearance: none; }\n\n::-webkit-file-upload-button {\n  -webkit-appearance: button;\n  font: inherit; }\n\n/* Vertical Rhythm Reset: Alignment */\n:root {\n  font-size: 16px; }\n\n*,\n*:before,\n*:after {\n  line-height: 1.50001rem; }\n\nbutton,\ninput:not([type=radio]):not([type=checkbox]),\noption,\nselect:not([multiple]) {\n  height: 1.50001rem; }\n\naudio {\n  height: 3.00002rem; }\n\nhr {\n  height: 3.00002rem; }\n\nselect[multiple],\ntextarea {\n  height: 6.00004rem; }\n\niframe,\nvideo {\n  height: 12.00008rem; }\n\nh1 {\n  margin-top: 0px;\n  margin-bottom: 1.50001rem; }\n\nblockquote,\ndl,\nform,\nh2,\nh3,\nh4,\nh5,\nh6,\nol,\np,\npre,\ntable,\nul {\n  margin-top: 1.50001rem;\n  margin-bottom: 1.50001rem; }\n\nfieldset {\n  display: inline-block;\n  margin: 1.50001rem 0 calc((1.50001rem) - 1px);\n  width: 100%; }\n\nh1 {\n  font-size: 6.85353rem;\n  line-height: 7.50001rem; }\n\nh2 {\n  font-size: 4.2358rem;\n  line-height: 4.50001rem; }\n\nh3 {\n  font-size: 2.61792rem;\n  line-height: 3.00001rem; }\n\nh4 {\n  font-size: 1.618rem;\n  line-height: 3.00001rem; }\n\nh5 {\n  font-size: 1rem;\n  line-height: 1.50001rem; }\n\nh6 {\n  font-size: 0.61805rem;\n  line-height: 1.50001rem; }\n\n.vr-font-size-0 {\n  font-size: 1rem;\n  line-height: 1.50001rem; }\n\n.vr-font-size-1 {\n  font-size: 1.618rem;\n  line-height: 3.00001rem; }\n\n.vr-font-size-2 {\n  font-size: 2.61792rem;\n  line-height: 3.00001rem; }\n\n.vr-font-size-3 {\n  font-size: 4.2358rem;\n  line-height: 4.50001rem; }\n\n.vr-font-size-4 {\n  font-size: 6.85353rem;\n  line-height: 7.50001rem; }\n\n.vr-font-size-5 {\n  font-size: 11.08901rem;\n  line-height: 12.00001rem; }\n\n.vr-line-height-1 {\n  line-height: 1.50001rem; }\n\n.vr-line-height-2 {\n  line-height: 3.00002rem; }\n\n.vr-line-height-3 {\n  line-height: 4.50003rem; }\n\n.vr-line-height-4 {\n  line-height: 6.00004rem; }\n\n.vr-line-height-5 {\n  line-height: 7.50005rem; }\n\n.vr-line-height-6 {\n  line-height: 9.00006rem; }\n\n.vr-line-height-7 {\n  line-height: 10.50007rem; }\n\n.vr-line-height-8 {\n  line-height: 12.00008rem; }\n\n.vr-line-height-9 {\n  line-height: 13.50009rem; }\n\n.vr-line-height-10 {\n  line-height: 15.0001rem; }\n\n[height=\"1\"],\nselect[multiple][size=\"1\"],\ntextarea[rows=\"1\"],\n.vr-height-1 {\n  height: 1.50001rem; }\n\n[height=\"2\"],\nselect[multiple][size=\"2\"],\ntextarea[rows=\"2\"],\n.vr-height-2 {\n  height: 3.00002rem; }\n\n[height=\"3\"],\nselect[multiple][size=\"3\"],\ntextarea[rows=\"3\"],\n.vr-height-3 {\n  height: 4.50003rem; }\n\n[height=\"4\"],\nselect[multiple][size=\"4\"],\ntextarea[rows=\"4\"],\n.vr-height-4 {\n  height: 6.00004rem; }\n\n[height=\"5\"],\nselect[multiple][size=\"5\"],\ntextarea[rows=\"5\"],\n.vr-height-5 {\n  height: 7.50005rem; }\n\n[height=\"6\"],\nselect[multiple][size=\"6\"],\ntextarea[rows=\"6\"],\n.vr-height-6 {\n  height: 9.00006rem; }\n\n[height=\"7\"],\nselect[multiple][size=\"7\"],\ntextarea[rows=\"7\"],\n.vr-height-7 {\n  height: 10.50007rem; }\n\n[height=\"8\"],\nselect[multiple][size=\"8\"],\ntextarea[rows=\"8\"],\n.vr-height-8 {\n  height: 12.00008rem; }\n\n[height=\"9\"],\nselect[multiple][size=\"9\"],\ntextarea[rows=\"9\"],\n.vr-height-9 {\n  height: 13.50009rem; }\n\n[height=\"10\"],\nselect[multiple][size=\"10\"],\ntextarea[rows=\"10\"],\n.vr-height-10 {\n  height: 15.0001rem; }\n\n.vr-width-1 {\n  width: 1.50001rem; }\n\n.vr-width-2 {\n  width: 3.00002rem; }\n\n.vr-width-3 {\n  width: 4.50003rem; }\n\n.vr-width-4 {\n  width: 6.00004rem; }\n\n.vr-width-5 {\n  width: 7.50005rem; }\n\n.vr-width-6 {\n  width: 9.00006rem; }\n\n.vr-width-7 {\n  width: 10.50007rem; }\n\n.vr-width-8 {\n  width: 12.00008rem; }\n\n.vr-width-9 {\n  width: 13.50009rem; }\n\n.vr-width-10 {\n  width: 15.0001rem; }\n\n.vr-margin-1 {\n  margin: 1.50001rem; }\n\n.vr-margin-2 {\n  margin: 3.00002rem; }\n\n.vr-margin-3 {\n  margin: 4.50003rem; }\n\n.vr-margin-4 {\n  margin: 6.00004rem; }\n\n.vr-margin-5 {\n  margin: 7.50005rem; }\n\n.vr-margin-top-1 {\n  margin-top: 1.50001rem; }\n\n.vr-margin-top-2 {\n  margin-top: 3.00002rem; }\n\n.vr-margin-top-3 {\n  margin-top: 4.50003rem; }\n\n.vr-margin-top-4 {\n  margin-top: 6.00004rem; }\n\n.vr-margin-top-5 {\n  margin-top: 7.50005rem; }\n\n.vr-margin-bottom-1 {\n  margin-bottom: 1.50001rem; }\n\n.vr-margin-bottom-2 {\n  margin-bottom: 3.00002rem; }\n\n.vr-margin-bottom-3 {\n  margin-bottom: 4.50003rem; }\n\n.vr-margin-bottom-4 {\n  margin-bottom: 6.00004rem; }\n\n.vr-margin-bottom-5 {\n  margin-bottom: 7.50005rem; }\n\n.vr-padding-1 {\n  padding: 1.50001rem; }\n\n.vr-padding-2 {\n  padding: 3.00002rem; }\n\n.vr-padding-3 {\n  padding: 4.50003rem; }\n\n.vr-padding-4 {\n  padding: 6.00004rem; }\n\n.vr-padding-5 {\n  padding: 7.50005rem; }\n\n.vr-padding-top-1 {\n  padding-top: 1.50001rem; }\n\n.vr-padding-top-2 {\n  padding-top: 3.00002rem; }\n\n.vr-padding-top-3 {\n  padding-top: 4.50003rem; }\n\n.vr-padding-top-4 {\n  padding-top: 6.00004rem; }\n\n.vr-padding-top-5 {\n  padding-top: 7.50005rem; }\n\n.vr-padding-bottom-1 {\n  padding-bottom: 1.50001rem; }\n\n.vr-padding-bottom-2 {\n  padding-bottom: 3.00002rem; }\n\n.vr-padding-bottom-3 {\n  padding-bottom: 4.50003rem; }\n\n.vr-padding-bottom-4 {\n  padding-bottom: 6.00004rem; }\n\n.vr-padding-bottom-5 {\n  padding-bottom: 7.50005rem; }\n\n.vr-offset-1 {\n  -webkit-transform: translateY(-1px);\n  -ms-transform: translateY(-1px);\n  transform: translateY(-1px);\n  margin-bottom: -2px; }\n\n.vr-offset-2 {\n  -webkit-transform: translateY(-2px);\n  -ms-transform: translateY(-2px);\n  transform: translateY(-2px);\n  margin-bottom: -4px; }\n\n.vr-offset-3 {\n  -webkit-transform: translateY(-3px);\n  -ms-transform: translateY(-3px);\n  transform: translateY(-3px);\n  margin-bottom: -6px; }\n\n.vr-offset-4 {\n  -webkit-transform: translateY(-4px);\n  -ms-transform: translateY(-4px);\n  transform: translateY(-4px);\n  margin-bottom: -8px; }\n\n.vr-offset-5 {\n  -webkit-transform: translateY(-5px);\n  -ms-transform: translateY(-5px);\n  transform: translateY(-5px);\n  margin-bottom: -10px; }\n\n.vr-offset-top-1 {\n  -webkit-transform: translateY(-1px);\n  -ms-transform: translateY(-1px);\n  transform: translateY(-1px);\n  margin-bottom: -1px; }\n\n.vr-offset-top-2 {\n  -webkit-transform: translateY(-2px);\n  -ms-transform: translateY(-2px);\n  transform: translateY(-2px);\n  margin-bottom: -2px; }\n\n.vr-offset-top-3 {\n  -webkit-transform: translateY(-3px);\n  -ms-transform: translateY(-3px);\n  transform: translateY(-3px);\n  margin-bottom: -3px; }\n\n.vr-offset-top-4 {\n  -webkit-transform: translateY(-4px);\n  -ms-transform: translateY(-4px);\n  transform: translateY(-4px);\n  margin-bottom: -4px; }\n\n.vr-offset-top-5 {\n  -webkit-transform: translateY(-5px);\n  -ms-transform: translateY(-5px);\n  transform: translateY(-5px);\n  margin-bottom: -5px; }\n\n.vr-offset-bottom-1 {\n  margin-bottom: -1px; }\n\n.vr-offset-bottom-2 {\n  margin-bottom: -2px; }\n\n.vr-offset-bottom-3 {\n  margin-bottom: -3px; }\n\n.vr-offset-bottom-4 {\n  margin-bottom: -4px; }\n\n.vr-offset-bottom-5 {\n  margin-bottom: -5px; }\n\n@media (min-width: 36em) {\n  /* Vertical Rhythm Reset: Breakpoint Alignment */ }\n\n@media (min-width: 48em) {\n  /* Vertical Rhythm Reset: Breakpoint Alignment */ }\n\n@media (min-width: 62em) {\n  /* Vertical Rhythm Reset: Breakpoint Alignment */ }\n\n@media (min-width: 75em) {\n  /* Vertical Rhythm Reset: Breakpoint Alignment */ }\n\n@media only screen and (max-device-width: 1024px) and (-webkit-min-device-pixel-ratio: 2) {\n  /* Vertical Rhythm Reset: Fix for mobile select[multiple] elements */\n  select[multiple],\n  select[multiple][size] {\n    height: 1.50001rem; } }\n","@import \"./node_modules/vertical-rhythm-reset/dist/vertical-rhythm-reset\";\n\n@import \"colors\";\n@import \"variables\";\n\n\n\nhtml, body, #root {\n  background-color: $bftTrinityColor;\n  color: $bftSecondaryColor; }\n","$bftPrimaryColor: #E11D24;\n$bftSecondaryColor: #FFFFFF;\n$bftTrinityColor: #111111;\n$bftSecondaryColorLinkHover: rgba($bftSecondaryColor, 0.7);\n$bftSecondaryColorHighlight: rgba($bftSecondaryColor, 0.06);\n$bftTrinityColorOpacity: rgba($bftTrinityColor, 0.97);\n$bftColorful-1: #4893CC;\n$bftColorful-2: #F7A432;\n","@import \"colors\";\n@import \"variables\";\n\n.BftHeader {\n  margin-bottom: 3em;\n  text-align: center;\n  .logo {\n    height: 15em;\n    background: {\n      image: url(\"/img/logo/10-line-height.png\");\n      position: center center;\n      repeat: no-repeat;\n      origin: content-box; }\n    @media screen and (max-width: $bft-grid-breakpoints-xl) {\n      height: 12em;\n      background: {\n        image: url(\"/img/logo/8-line-height.png\"); } }\n    @media screen and (max-width: $bft-grid-breakpoints-lg) {\n      height: 9em;\n      background: {\n        image: url(\"/img/logo/6-line-height.png\"); } }\n    @media screen and (max-width: $bft-grid-breakpoints-md) {\n      height: 6em;\n      background: {\n        image: url(\"/img/logo/4-line-height.png\"); } }\n    @media screen and (max-width: $bft-grid-breakpoints-sm) {\n      height: 4.5em;\n      background: {\n        image: url(\"/img/logo/3-line-height.png\"); } }\n    a {\n      width: 100%;\n      height: 100%;\n      display: block; } } }\n","@import \"colors\";\n@import \"variables\";\n\n.BftNav {\n  margin-bottom: 3rem;\n  a {\n    color: $bftSecondaryColor;\n    text-decoration: none;\n    &:hover {\n      color: $bftSecondaryColorLinkHover;\n      h4:after {\n        display: block; } }\n    &.selected {\n      color: $bftSecondaryColorLinkHover;\n      h4:after {\n        display: block; } } }\n  .navLink {\n    position: relative;\n    cursor: pointer;\n    margin: 0;\n    &:before {\n      content: ' ';\n      width: 100%;\n      height: 0.0625rem;\n      position: absolute;\n      left: 0;\n      bottom: 0;\n      display: block;\n      background-color: $bftPrimaryColor; }\n    &:after {\n      content: ' ';\n      width: 100%;\n      height: 1.25rem;\n      position: absolute;\n      left: 0;\n      bottom: 1rem/16*5;\n      display: none;\n      background-color: $bftSecondaryColorHighlight; } } }\n","@import \"colors\";\n@import \"variables\";\n\n.BftBio {\n  p {\n    margin: 0 3em 1.5em 3em;\n    @media screen and (max-width: $bft-grid-breakpoints-md) {\n      margin: 0 0 1.5em 0; } } }\n","@import \"colors\";\n@import \"variables\";\n\n.BftQuote {\n  text-align: center;\n  font-size: 1rem;\n  line-height: 1.5em;\n  font-style: italic;\n  background-color: $bftSecondaryColorHighlight;\n  padding: 1.5em;\n  .header {\n    text-align: left;\n    text-decoration: underline;\n    margin: 0; }\n  .opening {\n    text-align: left;\n    margin: 0; }\n  h4 {\n    margin: 0; }\n  p {\n    text-align: right;\n    margin: 0; }\n  .closing {\n    text-align: right;\n    margin: 0; } }\n","@import \"colors\";\n@import \"variables\";\n\n.BftFooter {\n  margin-bottom: 0em;\n  text-align: center;\n  background: $bftTrinityColor; }\n","@import \"colors\";\n@import \"variables\";\n\n.BftAllProjects {\n  margin: 0;\n  padding: 0;\n  .allTags {\n    border-bottom: 1px solid $bftPrimaryColor;\n    padding-bottom: 1.5em;\n    span {\n      font-size: 0.75rem;\n      margin-right: 0.5em;\n      text-decoration: underline;\n      display: inline-block;\n      a {\n        color: $bftSecondaryColor; } } }\n  .backLink {\n    a {\n      color: $bftSecondaryColor;\n      img {\n        margin-right: 1em; } } } }\n","@import \"colors\";\n@import \"variables\";\n\n.BftProject {\n  background-color: $bftSecondaryColorHighlight;\n  position: relative;\n  cursor: pointer;\n  .projectOverlay {\n    background-color: $bftTrinityColorOpacity;\n    height: 100%;\n    width: 100%;\n    overflow: auto;\n    display: block;\n    position: absolute;\n    padding: 1.5em 1em;\n    @media screen and (max-width: $bft-grid-breakpoints-sm) {\n      overflow-x: hidden;\n      padding: 0; }\n    &.hided {\n      display: none; }\n    .projectOverlayData {\n      box-sizing: border-box;\n      background-color: $bftSecondaryColorHighlight;\n      border: 1px solid $bftPrimaryColor;\n      padding: 1.4375em 1em;\n      height: 100%;\n      width: 100%;\n      display: block;\n      text-align: center;\n      h4 {\n        @media screen and (max-width: $bft-grid-breakpoints-sm) {\n          margin: 0; } }\n      .links {\n        .externalLinks {\n          a {\n            color: $bftSecondaryColor;\n            display: inline-block;\n            width: 46%;\n            height: 100%;\n            margin: 0 2%;\n            background-color: $bftSecondaryColorHighlight;\n            border: 2px solid $bftPrimaryColor;\n            border-radius: 8px;\n            padding: 0.625em 0;\n            box-sizing: border-box;\n            @media screen and (max-width: $bft-grid-breakpoints-sm) {\n              font-size: 0.75rem; } } }\n        .tags {\n          margin-top: 1.5em;\n          span {\n            font-size: 0.75rem;\n            margin-right: 0.5em;\n            text-decoration: underline;\n            display: inline-block;\n            a {\n              color: $bftSecondaryColor; } } } } } }\n  .projectData {\n    margin: 3em auto;\n    padding-left: 1em;\n    padding-right: 1em;\n    padding-bottom: 1.5em;\n    text-align: center;\n    height: 100%;\n    width: 100%;\n    // visibility: hidden\n    h4 {\n      margin-bottom: 0; }\n    .projectImg-xl {\n      display: inline-block;\n      @media screen and (max-width: $bft-grid-breakpoints-xl) {\n        margin: 0 -1em; }\n      @media screen and (max-width: $bft-grid-breakpoints-lg) {\n        margin: 0 auto; }\n      @media screen and (max-width: $bft-grid-breakpoints-sm) {\n        display: none; } }\n    .projectImg-sm {\n      display: none;\n      margin: 0 auto;\n      @media screen and (max-width: $bft-grid-breakpoints-sm) {\n        display: block; } }\n    .links {\n      overflow: auto;\n      .tags {\n        float: left;\n        span {\n          font-size: 0.75rem;\n          margin-right: 0.5em;\n          text-decoration: underline;\n          display: inline-block;\n          a {\n            color: $bftSecondaryColor; } } }\n      .externalLinks {\n        float: right;\n        span {\n          margin-left: 0.5em; } } } } }\n// .logo\n//   height: 15em\n//   background:\n//     image: url(\"/img/logo/10-line-height.png\")\n//     position: center center\n//     repeat: no-repeat\n//     origin: content-box\n//   @media screen and (max-width: $bft-grid-breakpoints-xl)\n//     height: 12em\n//     background:\n//       image: url(\"/img/logo/8-line-height.png\")\n//   @media screen and (max-width: $bft-grid-breakpoints-lg)\n//     height: 9em\n//     background:\n//       image: url(\"/img/logo/6-line-height.png\")\n//   @media screen and (max-width: $bft-grid-breakpoints-md)\n//     height: 6em\n//     background:\n//       image: url(\"/img/logo/4-line-height.png\")\n//   @media screen and (max-width: $bft-grid-breakpoints-sm)\n//     height: 4.5em\n//     background:\n//       image: url(\"/img/logo/3-line-height.png\")\n",".BftInfoAndContact {\n  padding: 0; }\n","@import \"colors\";\n@import \"variables\";\n\n.BftInfo {\n  padding: 1.4375em 1em;\n  border: 1px solid red;\n  margin: 0;\n  div {\n    &:nth-child(3) {\n      &:hover {\n        background: $bftSecondaryColorHighlight; }\n      text-align: center;\n      a {\n        color: $bftSecondaryColor; } } } }\n","@import \"colors\";\n@import \"variables\";\n\n.BftContacts {\n  padding: 3em 0;\n  .contactsGroups {\n    padding: 0 1em;\n    &:nth-child(1) {\n      border: 0;\n      background-color: $bftSecondaryColorHighlight; }\n    &:nth-child(3) {\n      border: 1px solid red;\n      padding: 1.4375em 1em;\n      @media screen and (max-width: $bft-grid-breakpoints-sm) {\n        margin: 0 1em; }\n      .row {\n        .col-xl-12 {\n          text-align: center; } } } } }\n","@import \"colors\";\n@import \"variables\";\n\n\na.BftSingleContact {\n  position: relative;\n  display: block;\n  color: $bftSecondaryColor;\n  text-decoration: none;\n  overflow: auto;\n  &:after {\n    content: ' ';\n    display: block;\n    position: absolute;\n    top: 0.75em;\n    let: 0;\n    width: 100%;\n    height: 1.5em;\n    background-color: $bftSecondaryColorHighlight; }\n  img {\n    display: inline-block;\n    margin: 0.71875em 1em 0.71875em 0; }\n  p {\n    display: inline-block;\n    margin: 0.75em 0; } }\n","@import \"colors\";\n@import \"variables\";\n\n.App {\n  padding: 4.5em 1em;\n  background-color: $bftTrinityColor;\n  margin: 0 auto; }\n"]}